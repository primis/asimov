#!/usr/bin/ruby
# Thank you Nick Quinlan for the help!

code = File.read(ARGV[0])

newExpression = /new\s+(\w+)\s*,\s*(\w+)/
newMatcher = <<-nw
    pusha
    mov esi, [\2]
    mov ebp, \1
    call _new_object
    popa
nw

delExpression = /del\s+(\w+)/
delMatcher = <<-del
    pusha
    mov ebp \1
    call _del_object
    popa
del

lorExpression = /lor\s+(\w+)\s*,\s*(\w+)/
lorMatcher = <<-lor
    push eax
    pusha
    %ifndef \2
    %define \2
    \2: db '\2',0
    %endif
    mov esi, \2
    call _find_variable
    popa
    pop \1
lor

strExpression = /str\s+(\w+)\s*,\s*(\w+)/
strMatcher = <<-str
    pusha
    push \2
    %ifndef \1
    %define \1
    \1: db '\1',0
    %endif
    mov esi, \1
    call _save_variable
    popa
str

ccrExpression = /ccr\s+(\w+)/
ccrMatcher = <<-ccr
    pusha
    %ifndef \1
    %define \1
    \1: db '\1',0
    %endif
    mov esi, \1
    call _call_class_routine
    popa
ccr

contents = code.gsub!(newExpression, newMatcher)
code = contents.gsub!(lorExpression, lorMatcher)
contents = code.gsub!(strExpression, strMatcher)
code = contents.gsub!(delExpression, delMatcher)
#contents = code.gsub!(ccrExpression, ccrMatcher)

classRegex = /\%class\s*\[(\w+)\]\s*:\s*\[(\w+)\]\n\%functions\n(.+?)\%variables\n(.+?)\%endclass/m
 
while (css = classRegex.match(contents)) do
 
classString = "#{css[1]}:"
classString += "Class_Header"
classString += "#{css[2]}"
classString += "db Function_Header\n"
 
functions = css[3].split("\n")
functions.each { |func|
trimmedFunc = func.strip
classString += "db '#{trimmedFunc}',0,.#{trimmedFunc}\n"
}
 
classString += "db Variable_Header"
variables = css[4].split("\n")
variables.each { |vars|
trimmedVar = vars.strip
classString += "db '#{trimmedVar}',0,1,1,1,1"
}
classString += "db Class_Footer"
 
contents.sub(classRegex, classString)

end
File.open(ARGV[0], "w") { |file| file.puts contents }
